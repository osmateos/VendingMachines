/* 
 * apiPredictPurchasePrice
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiPredictPurchasePriceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>WebServiceResult</returns>
        WebServiceResult ApiPredictPurchasePrice (InputParameters webServiceParameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>ApiResponse of WebServiceResult</returns>
        ApiResponse<WebServiceResult> ApiPredictPurchasePriceWithHttpInfo (InputParameters webServiceParameters);
        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CancelAndDeleteBatchExecution (string executionId);

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CancelAndDeleteBatchExecutionWithHttpInfo (string executionId);
        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBatchExecutionFile (string executionId, int? index, string fileName);

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBatchExecutionFileWithHttpInfo (string executionId, int? index, string fileName);
        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetBatchExecutionFiles (string executionId, int? index);

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetBatchExecutionFilesWithHttpInfo (string executionId, int? index);
        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>BatchWebServiceResult</returns>
        BatchWebServiceResult GetBatchExecutionStatus (string executionId, bool? showPartialResults = null);

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>ApiResponse of BatchWebServiceResult</returns>
        ApiResponse<BatchWebServiceResult> GetBatchExecutionStatusWithHttpInfo (string executionId, bool? showPartialResults = null);
        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetBatchExecutions ();

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetBatchExecutionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service asynchronously.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>StartBatchExecutionResponse</returns>
        StartBatchExecutionResponse StartBatchExecution (List<InputParameters> batchWebServiceParameters, int? parallelCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service asynchronously.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>ApiResponse of StartBatchExecutionResponse</returns>
        ApiResponse<StartBatchExecutionResponse> StartBatchExecutionWithHttpInfo (List<InputParameters> batchWebServiceParameters, int? parallelCount = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>Task of WebServiceResult</returns>
        System.Threading.Tasks.Task<WebServiceResult> ApiPredictPurchasePriceAsync (InputParameters webServiceParameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>Task of ApiResponse (WebServiceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebServiceResult>> ApiPredictPurchasePriceAsyncWithHttpInfo (InputParameters webServiceParameters);
        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CancelAndDeleteBatchExecutionAsync (string executionId);

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CancelAndDeleteBatchExecutionAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBatchExecutionFileAsync (string executionId, int? index, string fileName);

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBatchExecutionFileAsyncWithHttpInfo (string executionId, int? index, string fileName);
        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetBatchExecutionFilesAsync (string executionId, int? index);

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetBatchExecutionFilesAsyncWithHttpInfo (string executionId, int? index);
        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>Task of BatchWebServiceResult</returns>
        System.Threading.Tasks.Task<BatchWebServiceResult> GetBatchExecutionStatusAsync (string executionId, bool? showPartialResults = null);

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>Task of ApiResponse (BatchWebServiceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchWebServiceResult>> GetBatchExecutionStatusAsyncWithHttpInfo (string executionId, bool? showPartialResults = null);
        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetBatchExecutionsAsync ();

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetBatchExecutionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service asynchronously.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>Task of StartBatchExecutionResponse</returns>
        System.Threading.Tasks.Task<StartBatchExecutionResponse> StartBatchExecutionAsync (List<InputParameters> batchWebServiceParameters, int? parallelCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consume the apiPredictPurchasePrice web service asynchronously.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>Task of ApiResponse (StartBatchExecutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartBatchExecutionResponse>> StartBatchExecutionAsyncWithHttpInfo (List<InputParameters> batchWebServiceParameters, int? parallelCount = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiPredictPurchasePriceApi : IApiPredictPurchasePriceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPredictPurchasePriceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiPredictPurchasePriceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPredictPurchasePriceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiPredictPurchasePriceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>WebServiceResult</returns>
        public WebServiceResult ApiPredictPurchasePrice (InputParameters webServiceParameters)
        {
             ApiResponse<WebServiceResult> localVarResponse = ApiPredictPurchasePriceWithHttpInfo(webServiceParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>ApiResponse of WebServiceResult</returns>
        public ApiResponse< WebServiceResult > ApiPredictPurchasePriceWithHttpInfo (InputParameters webServiceParameters)
        {
            // verify the required parameter 'webServiceParameters' is set
            if (webServiceParameters == null)
                throw new ApiException(400, "Missing required parameter 'webServiceParameters' when calling ApiPredictPurchasePriceApi->ApiPredictPurchasePrice");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webServiceParameters != null && webServiceParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webServiceParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webServiceParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPredictPurchasePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebServiceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebServiceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebServiceResult)));
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>Task of WebServiceResult</returns>
        public async System.Threading.Tasks.Task<WebServiceResult> ApiPredictPurchasePriceAsync (InputParameters webServiceParameters)
        {
             ApiResponse<WebServiceResult> localVarResponse = await ApiPredictPurchasePriceAsyncWithHttpInfo(webServiceParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webServiceParameters">Input parameters to the web service.</param>
        /// <returns>Task of ApiResponse (WebServiceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebServiceResult>> ApiPredictPurchasePriceAsyncWithHttpInfo (InputParameters webServiceParameters)
        {
            // verify the required parameter 'webServiceParameters' is set
            if (webServiceParameters == null)
                throw new ApiException(400, "Missing required parameter 'webServiceParameters' when calling ApiPredictPurchasePriceApi->ApiPredictPurchasePrice");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webServiceParameters != null && webServiceParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webServiceParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webServiceParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPredictPurchasePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebServiceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebServiceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebServiceResult)));
        }

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CancelAndDeleteBatchExecution (string executionId)
        {
             ApiResponse<List<string>> localVarResponse = CancelAndDeleteBatchExecutionWithHttpInfo(executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CancelAndDeleteBatchExecutionWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->CancelAndDeleteBatchExecution");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAndDeleteBatchExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CancelAndDeleteBatchExecutionAsync (string executionId)
        {
             ApiResponse<List<string>> localVarResponse = await CancelAndDeleteBatchExecutionAsyncWithHttpInfo(executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels and deletes all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CancelAndDeleteBatchExecutionAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->CancelAndDeleteBatchExecution");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAndDeleteBatchExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBatchExecutionFile (string executionId, int? index, string fileName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetBatchExecutionFileWithHttpInfo(executionId, index, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetBatchExecutionFileWithHttpInfo (string executionId, int? index, string fileName)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}/{index}/files/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBatchExecutionFileAsync (string executionId, int? index, string fileName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetBatchExecutionFileAsyncWithHttpInfo(executionId, index, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a specific file from an execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <param name="fileName">Name of the file to be returned.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBatchExecutionFileAsyncWithHttpInfo (string executionId, int? index, string fileName)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFile");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}/{index}/files/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetBatchExecutionFiles (string executionId, int? index)
        {
             ApiResponse<List<string>> localVarResponse = GetBatchExecutionFilesWithHttpInfo(executionId, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetBatchExecutionFilesWithHttpInfo (string executionId, int? index)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFiles");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFiles");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}/{index}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetBatchExecutionFilesAsync (string executionId, int? index)
        {
             ApiResponse<List<string>> localVarResponse = await GetBatchExecutionFilesAsyncWithHttpInfo(executionId, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all files from an individual execution in apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="index">Index of the execution in the batch.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetBatchExecutionFilesAsyncWithHttpInfo (string executionId, int? index)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFiles");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ApiPredictPurchasePriceApi->GetBatchExecutionFiles");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}/{index}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>BatchWebServiceResult</returns>
        public BatchWebServiceResult GetBatchExecutionStatus (string executionId, bool? showPartialResults = null)
        {
             ApiResponse<BatchWebServiceResult> localVarResponse = GetBatchExecutionStatusWithHttpInfo(executionId, showPartialResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>ApiResponse of BatchWebServiceResult</returns>
        public ApiResponse< BatchWebServiceResult > GetBatchExecutionStatusWithHttpInfo (string executionId, bool? showPartialResults = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionStatus");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (showPartialResults != null) localVarQueryParams.Add("showPartialResults", Configuration.ApiClient.ParameterToString(showPartialResults)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchWebServiceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchWebServiceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchWebServiceResult)));
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>Task of BatchWebServiceResult</returns>
        public async System.Threading.Tasks.Task<BatchWebServiceResult> GetBatchExecutionStatusAsync (string executionId, bool? showPartialResults = null)
        {
             ApiResponse<BatchWebServiceResult> localVarResponse = await GetBatchExecutionStatusAsyncWithHttpInfo(executionId, showPartialResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">Execution id of the execution</param>
        /// <param name="showPartialResults">Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)</param>
        /// <returns>Task of ApiResponse (BatchWebServiceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchWebServiceResult>> GetBatchExecutionStatusAsyncWithHttpInfo (string executionId, bool? showPartialResults = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ApiPredictPurchasePriceApi->GetBatchExecutionStatus");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (showPartialResults != null) localVarQueryParams.Add("showPartialResults", Configuration.ApiClient.ParameterToString(showPartialResults)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchWebServiceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchWebServiceResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchWebServiceResult)));
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetBatchExecutions ()
        {
             ApiResponse<List<string>> localVarResponse = GetBatchExecutionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetBatchExecutionsWithHttpInfo ()
        {

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetBatchExecutionsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetBatchExecutionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all batch executions for apiPredictPurchasePrice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetBatchExecutionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service asynchronously.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>StartBatchExecutionResponse</returns>
        public StartBatchExecutionResponse StartBatchExecution (List<InputParameters> batchWebServiceParameters, int? parallelCount = null)
        {
             ApiResponse<StartBatchExecutionResponse> localVarResponse = StartBatchExecutionWithHttpInfo(batchWebServiceParameters, parallelCount);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service asynchronously.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>ApiResponse of StartBatchExecutionResponse</returns>
        public ApiResponse< StartBatchExecutionResponse > StartBatchExecutionWithHttpInfo (List<InputParameters> batchWebServiceParameters, int? parallelCount = null)
        {
            // verify the required parameter 'batchWebServiceParameters' is set
            if (batchWebServiceParameters == null)
                throw new ApiException(400, "Missing required parameter 'batchWebServiceParameters' when calling ApiPredictPurchasePriceApi->StartBatchExecution");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parallelCount != null) localVarQueryParams.Add("parallelCount", Configuration.ApiClient.ParameterToString(parallelCount)); // query parameter
            if (batchWebServiceParameters != null && batchWebServiceParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(batchWebServiceParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchWebServiceParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBatchExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartBatchExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartBatchExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartBatchExecutionResponse)));
        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service asynchronously.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>Task of StartBatchExecutionResponse</returns>
        public async System.Threading.Tasks.Task<StartBatchExecutionResponse> StartBatchExecutionAsync (List<InputParameters> batchWebServiceParameters, int? parallelCount = null)
        {
             ApiResponse<StartBatchExecutionResponse> localVarResponse = await StartBatchExecutionAsyncWithHttpInfo(batchWebServiceParameters, parallelCount);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Consume the apiPredictPurchasePrice web service asynchronously.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchWebServiceParameters">Input parameters to the web service.</param>
        /// <param name="parallelCount">Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)</param>
        /// <returns>Task of ApiResponse (StartBatchExecutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartBatchExecutionResponse>> StartBatchExecutionAsyncWithHttpInfo (List<InputParameters> batchWebServiceParameters, int? parallelCount = null)
        {
            // verify the required parameter 'batchWebServiceParameters' is set
            if (batchWebServiceParameters == null)
                throw new ApiException(400, "Missing required parameter 'batchWebServiceParameters' when calling ApiPredictPurchasePriceApi->StartBatchExecution");

            var localVarPath = "/api/apiPredictPurchasePrice/1.0/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parallelCount != null) localVarQueryParams.Add("parallelCount", Configuration.ApiClient.ParameterToString(parallelCount)); // query parameter
            if (batchWebServiceParameters != null && batchWebServiceParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(batchWebServiceParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchWebServiceParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBatchExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartBatchExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartBatchExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartBatchExecutionResponse)));
        }

    }
}
