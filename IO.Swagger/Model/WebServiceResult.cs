/* 
 * apiPredictPurchasePrice
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WebServiceResult
    /// </summary>
    [DataContract]
    public partial class WebServiceResult :  IEquatable<WebServiceResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebServiceResult" /> class.
        /// </summary>
        /// <param name="Success">Boolean flag indicating the success status of web service execution..</param>
        /// <param name="ErrorMessage">Error messages if any occurred during the web service execution..</param>
        /// <param name="ConsoleOutput">Console output from the web service execution..</param>
        /// <param name="ChangedFiles">The filenames of the files modified during the web service execution..</param>
        /// <param name="OutputParameters">OutputParameters.</param>
        public WebServiceResult(bool? Success = default(bool?), string ErrorMessage = default(string), string ConsoleOutput = default(string), List<string> ChangedFiles = default(List<string>), OutputParameters OutputParameters = default(OutputParameters))
        {
            this.Success = Success;
            this.ErrorMessage = ErrorMessage;
            this.ConsoleOutput = ConsoleOutput;
            this.ChangedFiles = ChangedFiles;
            this.OutputParameters = OutputParameters;
        }
        
        /// <summary>
        /// Boolean flag indicating the success status of web service execution.
        /// </summary>
        /// <value>Boolean flag indicating the success status of web service execution.</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Error messages if any occurred during the web service execution.
        /// </summary>
        /// <value>Error messages if any occurred during the web service execution.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Console output from the web service execution.
        /// </summary>
        /// <value>Console output from the web service execution.</value>
        [DataMember(Name="consoleOutput", EmitDefaultValue=false)]
        public string ConsoleOutput { get; set; }

        /// <summary>
        /// The filenames of the files modified during the web service execution.
        /// </summary>
        /// <value>The filenames of the files modified during the web service execution.</value>
        [DataMember(Name="changedFiles", EmitDefaultValue=false)]
        public List<string> ChangedFiles { get; set; }

        /// <summary>
        /// Gets or Sets OutputParameters
        /// </summary>
        [DataMember(Name="outputParameters", EmitDefaultValue=false)]
        public OutputParameters OutputParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebServiceResult {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ConsoleOutput: ").Append(ConsoleOutput).Append("\n");
            sb.Append("  ChangedFiles: ").Append(ChangedFiles).Append("\n");
            sb.Append("  OutputParameters: ").Append(OutputParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebServiceResult);
        }

        /// <summary>
        /// Returns true if WebServiceResult instances are equal
        /// </summary>
        /// <param name="other">Instance of WebServiceResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebServiceResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.ConsoleOutput == other.ConsoleOutput ||
                    this.ConsoleOutput != null &&
                    this.ConsoleOutput.Equals(other.ConsoleOutput)
                ) && 
                (
                    this.ChangedFiles == other.ChangedFiles ||
                    this.ChangedFiles != null &&
                    this.ChangedFiles.SequenceEqual(other.ChangedFiles)
                ) && 
                (
                    this.OutputParameters == other.OutputParameters ||
                    this.OutputParameters != null &&
                    this.OutputParameters.Equals(other.OutputParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.ConsoleOutput != null)
                    hash = hash * 59 + this.ConsoleOutput.GetHashCode();
                if (this.ChangedFiles != null)
                    hash = hash * 59 + this.ChangedFiles.GetHashCode();
                if (this.OutputParameters != null)
                    hash = hash * 59 + this.OutputParameters.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
